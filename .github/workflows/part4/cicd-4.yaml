name: cicd-4
on:
  push:
    paths:
      - "my-app/**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, master]
    paths:
      - "my-app/**"

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: setup-node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies
        run: |
          cd my-app
          npm ci
      - name: npm build
        run: |
          cd my-app
          npm run build

  set-environment:
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment  }}
    steps:
      - name: set env
        id: set-env
        run: |
          if [[ ${{ github.ref_type }} == "tag" ]]; then
            echo "environment=qa" >> $GITHUB_OUTPUT
            exit 0  
          fi

          if [[ ${{ github.ref_type }} == "branch" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            if [[ ${{ github.base_ref }} == "master" ]]; then
              echo "environment=staging" >> $GITHUB_OUTPUT
            fi
          fi
      - name: check env
        run: echo ${{ steps.set-env.outputs.environment }}

  image-build:
    runs-on: ubuntu-latest
    needs: [set-environment]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{  matrix.environment  }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

  deploy:
    needs: [set-environment, image-build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{  matrix.environment  }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: notify
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "message",
              "blocks": [
                {
                  "type":"section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Environment : ${{ needs.set-environment.outputs.environment }}, Deploy Result"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  create-pr:
    if: needs.set-environment.outputs.environment == 'qa'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: gh auth login
        run: |
          echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | gh auth login --with-token
      - name: create branch
        run: |
          git checkout -b release/${{ github.ref_name }}
          git push origin release/${{ github.ref_name }}
      - name: create pr
        run: |
          gh pr create --base master --head release/${{ github.ref_name }} --title "release/${{ github.ref_name }} -> master" --body "release pr"

  approve:
    if: needs.set-environment.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    environment: approve-process
    steps:
      - name: approve
        run: |
          echo "Approve Done"

  prod-deploy:
    runs-on: ubuntu-latest
    needs: [approve]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["prod"]
    environment: ${{  matrix.environment  }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: notify
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "text": "message",
              "blocks": [
                {
                  "type":"section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Environment : ${{  matrix.environment  }}, Deploy Result : ${{ steps.status.outcome}}, Repository : ${{ github.repository }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
