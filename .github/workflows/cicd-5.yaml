name: cicd-5
on:
  push:
    paths:
      - "my-app/**"
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    types: [opened, synchronize, closed]
    branches: [dev, master]
    paths:
      - "my-app/**"

jobs:
  test:
    if: github.event.action == 'opened' || github.event.action == 'synchronize'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Checkout the module code
        uses: actions/checkout@v4
        with:
          repository: "jaeyun-action/github-actions-module"
          path: ./actions-module
      - name: use test module
        uses: ./actions-module/common/test
        with:
          NODE_VERSION: "lts/*"
          WORKING_DIRECTORY: "my-app"

  set-environment:
    if: github.event.pull_request.merged == true || github.ref_type == 'tag'
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment  }}
    steps:
      - name: Checkout the module code
        uses: actions/checkout@v4
        with:
          repository: "jaeyun-action/github-actions-module"
          path: ./actions-module
      - name: Use set-environment module
        uses: ./actions-module/common/set-environment
        id: set-env
        with:
          REF_TYPE: ${{ github.ref_type }}
          BASE_REF: ${{ github.base_ref }}

  image-build:
    runs-on: ubuntu-latest
    needs: [set-environment]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: checkout
        uses: actions/checkout@v4

  deploy:
    needs: [set-environment, image-build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["${{ needs.set-environment.outputs.environment }}"]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Checkout the module code
        uses: actions/checkout@v4
        with:
          repository: "jaeyun-action/github-actions-module"
          path: ./actions-module
      - name: Use slack module
        if: always()
        uses: ./actions-module/common/slack
        with:
          ENVIRONMENT: ${{ matrix.environment }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  create-pr:
    if: needs.set-environment.outputs.environment == 'qa'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Checkout the module code
        uses: actions/checkout@v4
        with:
          repository: "jaeyun-action/github-actions-module"
          path: ./actions-module
      - name: Use create-pr module
        uses: ./actions-module/common/create-pr
        with:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          HEAD: release/${{ github.ref_name }}
          BASE: master

  approve:
    if: needs.set-environment.outputs.environment == 'staging'
    runs-on: ubuntu-latest
    needs: [set-environment, deploy]
    environment: approve-process
    steps:
      - name: approve
        run: |
          echo "Approve Done"

  prod-deploy:
    runs-on: ubuntu-latest
    needs: [approve]
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        environment: ["prod"]
    environment: ${{ matrix.environment }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Checkout the module code
        uses: actions/checkout@v4
        with:
          repository: "jaeyun-action/github-actions-module"
          path: ./actions-module
      - name: Use slack module
        if: always()
        uses: ./actions-module/common/slack
        with:
          ENVIRONMENT: ${{ matrix.environment }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
